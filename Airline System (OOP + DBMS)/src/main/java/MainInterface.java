import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

public class MainInterface {

    //    private JButton messageButton;
    protected JPanel mainPanel;
    private JTable tableData;
    private JButton showPassengers;
    private JButton showFlights;
    private JButton showTickets;

    public MainInterface() throws SQLException {
        showPassengers.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    showPassengerData();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        });

        showTickets.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    showTicketData();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        });

        showFlights.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    showFlightData();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        });

    }

    void showPassengerData() throws SQLException {
        Passengers P = new Passengers();
        ResultSet rs = P.view();
        ResultSetMetaData rsmd = rs.getMetaData();
        DefaultTableModel model = (DefaultTableModel) tableData.getModel();
        model.getDataVector().removeAllElements();
        int columnCount = rsmd.getColumnCount();
        String[] columnNames = new String[columnCount];
        for (int i = 0; i < columnCount; i++) {
            columnNames[i] = rsmd.getColumnName(i + 1);
        }
        model.setColumnIdentifiers(columnNames);

        while (rs.next()) {
            model.addRow(returnColumnRows(rs, columnCount));
        }
    }

    void showFlightData() throws SQLException {
        Flights F = new Flights();
        ResultSet rs = F.view();
        ResultSetMetaData rsmd = rs.getMetaData();
        DefaultTableModel model = (DefaultTableModel) tableData.getModel();
        model.getDataVector().removeAllElements();
        int columnCount = rsmd.getColumnCount();
        String[] columnNames = new String[columnCount];
        for (int i = 0; i < columnCount; i++) {
            columnNames[i] = rsmd.getColumnName(i + 1);
        }
        model.setColumnIdentifiers(columnNames);
        while (rs.next()) {
            model.addRow(returnColumnRows(rs, columnCount));
        }
    }

    void showTicketData() throws SQLException {
        Tickets T = new Tickets();
        ResultSet rs = T.view();
        ResultSetMetaData rsmd = rs.getMetaData();
        DefaultTableModel model = (DefaultTableModel) tableData.getModel();
        model.getDataVector().removeAllElements();
        int columnCount = rsmd.getColumnCount();
        String[] columnNames = new String[columnCount];
        for (int i = 0; i < columnCount; i++) {
            columnNames[i] = rsmd.getColumnName(i + 1);
        }
        model.setColumnIdentifiers(columnNames);
        while (rs.next()) {
            model.addRow(returnColumnRows(rs, columnCount));
        }
    }

    private String[] returnColumnRows(ResultSet rs, int columnCount) throws SQLException {
        String[] row = new String[columnCount];
        for (int j = 0; j < columnCount; j++) {
            if (j == 0)
                row[j] = Integer.toString(rs.getInt(j + 1));
            else
                row[j] = rs.getString(j + 1);
        }
        return row;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainPanel.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 3, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        tableData = new JTable();
        scrollPane1.setViewportView(tableData);
        showPassengers = new JButton();
        showPassengers.setText("Passengers");
        mainPanel.add(showPassengers, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        showTickets = new JButton();
        showTickets.setText("Tickets");
        mainPanel.add(showTickets, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        showFlights = new JButton();
        showFlights.setText("Flights");
        mainPanel.add(showFlights, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
